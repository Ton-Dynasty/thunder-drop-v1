#include "imports/stdlib.fc";
#include "./workchain.fc";
#include "./opcodes.fc";

() deploy( ;; deploy contract with state_init
    int bounce_flag,
    slice receiver,
    int value,
    cell body,
    cell state_init,
    int mode
) impure inline_ref {
    var msg = begin_cell()
        .store_msg_flags_and_address_none(bounce_flag)
        .store_slice(receiver)
        .store_coins(value)
        .store_statinit_ref_and_body_ref(state_init, body)
        .end_cell();
    send_raw_message(msg, mode);
}

() transfer_ton( ;; transfer TON with body
    int bounce_flag,
    slice receiver,
    int value,
    cell body,
    int mode
) impure inline_ref {
    var msg = begin_cell()
        .store_msg_flags_and_address_none(bounce_flag)
        .store_slice(receiver)
        .store_coins(value)
        .store_only_body_ref(body);
    
    send_raw_message(msg.end_cell(), mode);
}

() transfer_jetton(
    int bounce_flag,
    slice receiver, 
    slice jetton_wallet, 
    int jetton_amount, 
    int ton_amount, 
    int query_id, 
    cell payload, 
    int forward_ton,
    int mode
) impure inline_ref {

    ;; send jetton transfer to jetton wallet
    cell msg_body = begin_cell()
	.store_uint(op::transfer, 32)
	.store_uint(query_id, 64)
	.store_coins(jetton_amount)
	.store_slice(receiver)
	.store_slice(receiver)
	.store_uint(0, 1)
	.store_coins(forward_ton)
	.store_maybe_ref(payload)
	.end_cell();


    cell msg = begin_cell()
	.store_msg_flags_and_address_none(bounce_flag)
	.store_slice(jetton_wallet)
	.store_coins(ton_amount)
	.store_only_body_ref(msg_body)
	.end_cell();

    send_raw_message(msg, mode); 
}

slice get_address(cell state_init) inline_ref {
    return begin_cell()
    .store_uint(2, 2) ;; addr_std$10
    .store_uint(0, 1) ;; anycast nothing
    .store_int(MY_WORKCHAIN, 8)
    .store_uint(cell_hash(state_init), 256)
    .end_cell()
    .begin_parse();
}

(cell) pack_provide_wallet_address(
    int query_id,
    int value,
    slice jetton_master_address
) inline {
    cell msg = begin_cell()
        .store_msg_flags_and_address_none(BOUNCEABLE)
        .store_slice(jetton_master_address) ;; dest
        .store_coins(value)
        .store_only_body_ref(begin_cell()
            .store_op(op::provide_wallet_address)
            .store_query_id(query_id)
            .store_slice(my_address())
            .store_bool(FALSE)
            .end_cell()
    ).end_cell();
    return msg;
}

cell pack_claim_internal(int query_id, slice sender, int index, slice account, int amount) {
    return begin_cell()
        .store_op(op::claim_internal)
        .store_query_id(query_id)
        .store_slice(sender)
        .store_uint(index, 256)
        .store_slice(account)
        .store_coins(amount)
        .end_cell();
}

cell pack_claim_internal_reply(int query_id, slice sender, int index, slice account, int amount, int success) {
    return begin_cell()
        .store_op(op::claim_internal_relpy)
        .store_query_id(query_id)
        .store_slice(sender)
        .store_uint(index, 256)
        .store_slice(account)
        .store_coins(amount)
        .store_bool(success)
        .end_cell();
}

cell pack_distributor_data(int prefix, slice thunder_drop) inline_ref {
    return begin_cell()
    .store_uint(prefix, 256)
    .store_slice(thunder_drop)
    .store_uint(0, 256) ;; claim_word
    .end_cell();
}

cell calculate_distributor_state_init(int prefix, slice thunder_drop, cell distributor_code) inline_ref {
    return begin_cell()
    .store_uint(0, 2) ;; 0b00 - No split_depth; No special
    .store_maybe_ref(distributor_code)
    .store_maybe_ref(
        pack_distributor_data(prefix, thunder_drop)
    )
    .store_uint(0, 1) ;; Empty libraries
    .end_cell();
}
